<?php

/**
 * @file
 * Implemenation of the date pager.
 *
 * @author Kate Heinlein
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\date_pager\PagerDate;

/**
 * Implements hook_help().
 */
function date_pager_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the date_pager module.
    case 'help.page.date_pager':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A Date Pager Views Plugin') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function date_pager_theme($existing, $type, $theme, $path) {
  if ($type == 'module') {
    return [
      'datepager' => [
        'variables' => [
          'min' => NULL,
          'max' => NULL,
          'active_date' => [],
          'granularity' => NULL,
          'element' => NULL,
          'parameters' => [],
          'items' => [],
          'route_name' => NULL,
          'route_parameters' => [],
        ],
      ],
    ];
  }
}

/**
 * Prepares variables for pager templates.
 *
 * Default template: datepager.html.twig.
 */
function template_preprocess_datepager(&$variables) {

  global $pager_page_array, $pager_total;

  $element = $variables['element'];

  // Load variables.
  $parameters = $variables['parameters'];
  $route_name = $parameters['route_name'];
  $route_parameters = isset($parameters['route_parameters']) ? $parameters['route_parameters'] : [];

  // numerical granularity
  $granularity = min(
      $variables['options']['granularity'], $variables['parameters']['current_granularity'] + 1
  );

  $date_min = $parameters['min'];
  $date_max = $parameters['max'];

  $active_date = $parameters['current'];
  $current_year = date('Y', $active_date->toTime());
  $current_month = date('m', $active_date->toTime());
  $current_day = date('d', $active_date->toTime());
  $current_hour = date('H', $active_date->toTime());
  $current_minute = date('i', $active_date->toTime());
  $current_second = date('s', $active_date->toTime());


  $variables['pager'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => 'pager date-pager',
    ],
  ];

  // seconds granularity
  if ($granularity > 4) {
    $seconds = [
      'title' => new TranslatableMarkup('Seconds'),
      '#theme' => 'item_list',
      'items' => [],
      'wrapper_attributes' => [
        'class' => [
          'date-pager__hours',
        ],
      ],
    ];
    for ($sec = 0; $sec < 60; $sec++) {
      $padded_second = str_pad($sec, 2, '0', STR_PAD_LEFT);
      $date = "${current_year}-${current_month}-${current_day}T${current_hour}:${current_minute}:${padded_second}";
      $pagerdate = new PagerDate($date, 'Y-m-d\TH:i:s');
      if ($pagerdate->between($date_min, $date_max)) {
        $seconds['items'][$padded_second] = $pagerdate->toLink($route_name, $active_date);
      }
    }
  }


  // minutes granularity
  if ($granularity > 3) {
    $minutes = [
      'title' => new TranslatableMarkup('Minute'),
      '#theme' => 'item_list',
      'items' => [],
      'wrapper_attributes' => [
        'class' => [
          'date-pager__hours',
        ],
      ],
    ];
    for ($minute = 0; $minute < 60; $minute++) {
      $padded_minute = str_pad($minute, 2, '0', STR_PAD_LEFT);
      $date = "${current_year}-${current_month}-${current_day}T${current_hour}:${padded_minute}:00";
      $pagerdate = new PagerDate($date, 'Y-m-d\TH:i');
      if ($pagerdate->between($date_min, $date_max)) {
        $minutes['items'][$padded_minute] = $pagerdate->toLink($route_name, $active_date);
        if ($padded_minute == $current_minute && isset($seconds)) {
          $minutes['items'][$padded_minute]['seconds'] = $seconds;
        }
      }
    }
  }



  // Hours granularity
  if ($granularity > 2) {
    $hours = [
      'title' => new TranslatableMarkup('Hour'),
      '#theme' => 'item_list',
      'items' => [],
      'wrapper_attributes' => [
        'class' => [
          'date-pager__hours',
        ],
      ],
    ];
    for ($hour = 0; $hour < 24; $hour++) {
      $padded_hour = str_pad($hour, 2, '0', STR_PAD_LEFT);
      $date = "${current_year}-${current_month}-${current_day}T${padded_hour}:00:00";
      $pagerdate = new PagerDate($date, 'Y-m-d\TH');
      if ($pagerdate->between($date_min, $date_max)) {
        $hours['items'][$padded_hour] = $pagerdate->toLink($route_name, $active_date);
        if ($padded_hour == $current_hour && isset($minutes)) {
          $hours['items'][$padded_hour]['minutes'] = $minutes;
        }
      }
    }

    $variables['pager']['time'] = $hours;
  }



  // Process day granularity.
  if ($granularity > 1) {
    $days = [
      'title' => new TranslatableMarkup('Day'),
      '#theme' => 'item_list',
      'items' => [],
      'wrapper_attributes' => [
        'class' => [
          'date-pager__days',
        ],
      ],
    ];
    for ($day = 1; $day < 32; $day++) {
      if (checkdate(intval($current_month), $day, $current_year)) {
        $padded_day = str_pad($day, 2, '0', STR_PAD_LEFT);
        $date = "${current_year}-${current_month}-${padded_day}";
        $pagerdate = new PagerDate($date, 'Y-m-d');
        if ($pagerdate->between($date_min, $date_max)) {
          $days['items'][$padded_day] = $pagerdate->toLink($route_name, $active_date);
        }
      }
    }
  }

  // Process month granularity.
  if ($granularity > 0) {

    // Construct Month Pager.
    $months = [
      'title' => new TranslatableMarkup('Month'),
      '#theme' => 'item_list',
      'items' => [],
      'wrapper_attributes' => [
        'class' => [
          'date-pager__months',
        ],
      ],
    ];
    for ($month = 1; $month < 13; $month++) {
      $padded_month = str_pad($month, 2, '0', STR_PAD_LEFT);
      $pagerdate = new PagerDate("$current_year-$padded_month", 'Y-m');
      if ($pagerdate->between($date_min, $date_max)) {
        $months['items'][$padded_month] = $pagerdate->toLink($route_name, $active_date);
        if ($padded_month == $current_month && isset($days)) {
          $months['items'][$padded_month]['days'] = $days;
        }
      }
    }
  }

  // Construct Year Pager.
  // Determine year Padding.
  $show_years = 3;
  $year_padding = ($show_years - 1) / 2;

  $start_year = date('Y', $date_min->toTime()) - $year_padding;
  $end_year = date('Y', $date_max->toTime()) + $year_padding;

  // Build year items.
  $years = [
    '#title' => new TranslatableMarkup('Year'),
    '#theme' => 'item_list',
    'items' => [],
    '#wrapper_attributes' => [
      'class' => [
        'date-pager__years',
      ],
    ],
  ];

  for ($year = $start_year; $year <= $end_year; $year++) {
    $pagerdate = new PagerDate("$year", 'Y');
    if ($pagerdate->between($date_min, $date_max)) {
      $years['items'][$year] = $pagerdate->toLink($route_name, $active_date);
      if ($year == $current_year && isset($months)) {
        $years['items'][$year]['months'] = $months;
      }
    }
  }

  $variables['pager']['date'] = $years;
  $variables['pager']['#attached']['library'][] = 'date_pager/datepager';
  // The rendered link needs to play well with any other query parameter used
  // on the page, like exposed filters, so for the cacheability all query
  // parameters matter.
  $variables['#cache']['contexts'][] = 'url.query_args';
}
