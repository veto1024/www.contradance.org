#!/usr/bin/python3.7

# PHP code to push node updates and perform creation
import subprocess, os
from datetime import datetime



def createPHPTest(name, amount,timestamp):

	data = {'name':name, 'amount':amount, 'timestamp': timestamp, 'early_timestamp': timestamp+(60*60*12)}
	pretext= r"""
<?php

use Drupal\node\Entity\Node;
use Drupal\paragraphs\entity\Paragraph;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/* Find the node for the next event date */
$submitDateTime = DrupalDateTime::createFromTimestamp({timestamp});
$submitDateTime->setTimezone(new \DateTimeZone('UTC'));
$submitFormatted = $submitDateTime->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

$earlyDateTime = DrupalDateTime::createFromTimestamp({early_timestamp});
$earlyDateTime->setTimeZone(new \DateTimeZone('UTC'));
$earlyFormatted = $earlyDateTime->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

$query = \Drupal::entityQuery('node')
 ->condition('type','event')
 ->condition('status',1)
 ->condition('field_event_type', 2, '=')
 ->condition('field_event_date.end_value', $submitFormatted,'>')
 ->condition('field_event_date.value', $earlyFormatted, '<')
 ->sort('field_event_date.end_value','ASC')
 ->range(0,1);

$result=$query->execute();
$num = count($result);

$id = reset($result);
$message = "Venmo data:
results: {{$id}}
name: {name}
timestamp: {timestamp}
early_timestamp: {early_timestamp}
timestampformat: {{$submitFormatted}}
numresults: {{$num}}
";

\Drupal::logger('system')->debug($message);
"""
	return pretext.format(**data)

# Drupal 8 Version:
def createPHP(name, amount, timestamp):

	data = {'name':name, 'amount':amount, 'timestamp': timestamp, 'early_timestamp': timestamp+(60*60*12)}
	pretext= r"""
<?php
use Drupal\node\Entity\Node;
use Drupal\paragraphs\entity\Paragraph;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/* Find the node for the next event date */
$submitDateTime = DrupalDateTime::createFromTimestamp({timestamp});
$submitDateTime->setTimezone(new \DateTimeZone('UTC'));
$submitFormatted = $submitDateTime->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

$earlyDateTime = DrupalDateTime::createFromTimestamp({early_timestamp});
$earlyDateTime->setTimeZone(new \DateTimeZone('UTC'));
$earlyFormatted = $earlyDateTime->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

$query = \Drupal::entityQuery('node')
 ->condition('type','event')
 ->condition('status',1)
 ->condition('field_event_type', 2, '=')
 ->condition('field_event_date.end_value', $submitFormatted,'>')
 ->condition('field_event_date.value', $earlyFormatted, '<')
 ->sort('field_event_date.end_value','ASC')
 ->range(0,1);

$result=$query->execute();
$id = reset($result);

if ($id) {{
  $venmo_pay_nid = $result[array_keys($result)[0]];
  $node=\Drupal\node\Entity\Node::load($venmo_pay_nid);

 // Create single new paragraph

  $paragraph = \Drupal\paragraphs\Entity\Paragraph::create([
    'type' => 'venmo_payment',
    'field_dancer_name' => "{name}",
    'field_amount' => {amount},
    'field_note' => 'Automatically generated by Venmo Python Script at '.$submitFormatted,
    'field_timestamp' => {timestamp},
  ]);
  $paragraph->isNew();
  $paragraph->save();

  if ($node->hasField('field_venmo_payment')) {{
    $current = $node->get('field_venmo_payment')->getValue();
    $current[] = array(
      'target_id' => $paragraph->id(),
     'target_revision_id' => $paragraph->getRevisionId(),
    );
  }} else {{
    $current = array(
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    );
  }}
  $node->set('field_venmo_payment', $current);
  $node->save();
  $message = "Venmo payment created at {{$submitFormatted}} for node {{$id}}.";
  \Drupal::logger('system')->debug($message);
}}

"""
	return pretext.format(**data)

def drushPush(subs, logger=None, dryRun=False):
	logging=logger
	if not subs:
		try:
			logging.info("Received blank submission. Skipping Drush push")
		except:
			print("Recevied blanks submission. Skipping Drush push")
		return
	for (a,b, timestamp) in subs:
		if dryRun: 
			print(createPHP(a,b,timestamp))
			continue
		try:
			f=open("/tmp/venmo.php","w")
			f.write(createPHP(a,b, timestamp))
			logging.debug("PHP File generated")
			f.close()
			try:
				sub=subprocess.Popen("runuser -l ec2-user -c 'drush -r=/var/app/current --script-path=/tmp scr venmo.php'", shell=True)
				ret=sub.communicate()
			except:
				logging.exception("Drush failed to execute")
			try:
				os.remove('/tmp/venmo.php')
				pass
			except:
				logging.warning("Unable to delete venmo.php file")
		except Exception as e:
			print("Failed to execute drush command with error: %s" % str(e))

